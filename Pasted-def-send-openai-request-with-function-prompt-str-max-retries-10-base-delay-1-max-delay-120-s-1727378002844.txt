def send_openai_request_with_function(prompt: str, max_retries=10, base_delay=1, max_delay=120) -> str:
    if not OPENAI_API_KEY:
        logger.warning("OpenAI API key is not set. Skipping AI check.")
        return "AI check skipped"

    function_definition = [
        {
            "name": "provide_binary_answer",
            "description": "Provides a binary answer to a question.",
            "parameters": {
                "type": "object",
                "properties": {
                    "answer": {
                        "type": "string",
                        "enum": ["Yes", "No"],
                        "description": "The binary answer to the question."
                    }
                },
                "required": ["answer"]
            }
        }
    ]

    for attempt in range(max_retries):
        try:
            logger.debug(f"Sending request to OpenAI API with function calling (attempt {attempt + 1}/{max_retries})")
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo-0613",
                messages=[{"role": "user", "content": prompt}],
                functions=function_definition,
                function_call={"name": "provide_binary_answer"},
                max_tokens=50,
            )
            message = response.choices[0].message
            if message.get("function_call"):
                function_args = json.loads(message["function_call"]["arguments"])
                return function_args.get("answer")
            else:
                raise ValueError("Function call not returned by the API.")
        except Exception as e:
            logger.error(f"Error in send_openai_request_with_function: {str(e)}", exc_info=True)
            if attempt == max_retries - 1:
                return f"AI check failed: Unexpected error - {str(e)}"

        delay = min(max_delay, (base_delay * 2 ** attempt) + random.uniform(0, 0.1 * (2 ** attempt)))
        logger.info(f"Retrying in {delay:.2f} seconds...")
        time.sleep(delay)
